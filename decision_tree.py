# -*- coding: utf-8 -*-
"""Decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i6_aAswmhIE0_tLx0Ba6DGiWNSXCgCHf

#Cover Page

**Developed by:**

**Mohamed Fathi - 41810059**

**Ahmed Saber - 41810077**

# Import the dataset from drive
"""

!gdown --id 1MbUWPsEZJ_Dana5RC07wUGTIgzN92Uld

"""#Importing libraries"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, classification_report, mean_absolute_error, confusion_matrix, accuracy_score
from sklearn.tree import DecisionTreeClassifier

"""# show how the data looks like"""

data = pd.read_csv('seeds.csv')
data.head()

"""#Start Split the data and train"""

X_train, X_test, y_train, y_test = train_test_split(data.drop('Type', axis=1), data['Type'], test_size = 0.20, random_state=100)
print(len(X_train), "train +", len(X_test), "valid")

"""**Using Decision tree for trainning**

#using gini
"""

DT_gini = DecisionTreeClassifier(criterion = "gini", random_state = 0,max_depth=3, min_samples_leaf=5)
DT_gini.fit(X_train, y_train)

y_pred_1 = DT_gini.predict(X_test)
cm_1 = confusion_matrix(y_test, y_pred_1)

sns.heatmap(cm_1, annot=True)
plt.xlabel('Prediction')
plt.ylabel('Truth')

"""**Acuuracy**"""

var="%"
print("Accuracy: %0.1f" % (accuracy_score(y_test,y_pred_1)*100), var[0])

"""**classification repor**"""

print(classification_report(y_test, y_pred_1))

"""# using entropy"""

DT_entropy = DecisionTreeClassifier(criterion = "entropy", random_state = 0, max_depth = 3, min_samples_leaf = 5)
DT_entropy.fit(X_train, y_train)

y_pred_2 = DT_entropy.predict(X_test)
cm_2 = confusion_matrix(y_test, y_pred_2)

sns.heatmap(cm_2, annot=True)
plt.xlabel('Prediction')
plt.ylabel('Truth')

"""**Acuuracy**"""

var="%"
print("Accuracy: %0.1f" % (accuracy_score(y_test,y_pred_2)*100), var[0])

"""**classification repor**"""

print(classification_report(y_test, y_pred_2))